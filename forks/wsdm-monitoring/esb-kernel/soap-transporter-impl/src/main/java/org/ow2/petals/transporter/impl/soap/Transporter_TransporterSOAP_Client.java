
package org.ow2.petals.transporter.impl.soap;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.net.URI;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import java.util.logging.Logger;

import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;


import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.Namespace;
import org.jdom.input.DOMBuilder;
import org.jdom.output.DOMOutputter;
import org.ow2.easywsdl.schema.api.abstractElmt.AbstractSchemaElementImpl;
import org.ow2.easywsdl.schema.api.extensions.NamespaceMapperImpl;
import org.ow2.easywsdl.schema.api.extensions.SchemaLocatorImpl;
import org.ow2.easywsdl.schema.util.XMLPrettyPrinter;
import org.ow2.petals.exchange.ExchangeFactory;
import org.ow2.petals.exchange.api.Exchange;
import org.ow2.petals.exchange.api.ExchangeException;
import org.ow2.petals.exchange.api.ExchangeWriter;
import org.ow2.petals.exchange.impl.ExchangeImpl;
import org.ow2.petals.soap.handler.SOAPException;
import org.ow2.petals.soap.handler.SOAPSender;
import org.ow2.petals.transporter.PullWithId;
import org.ow2.petals.transporter.PushRequest;
import org.ow2.petals.transporter.TransportException_Exception;
import org.ow2.petals.transporter.Transporter;
import org.ow2.petals.transporter.api.transport.TransportException;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;

import petals.ow2.org.exchange.ExchangeType;

/**
 * This class was generated by Apache CXF 2.1.4
 * Sat Jul 04 22:13:09 CEST 2009
 * Generated source version: 2.1.4
 * 
 */

public final class Transporter_TransporterSOAP_Client implements Transporter {
	
	private static final Logger log = Logger.getLogger(Transporter_TransporterSOAP_Client.class.getName());

	private static final QName SERVICE_NAME = new QName("http://petals.ow2.org/transporter/", "transporterService");

	private TransporterService ss;

	private SOAPSender sender = new SOAPSender();
	
	private ExchangeWriter writer = null;

	private Map<QName, String> listOfTransporters = new HashMap<QName, String>();


	

	public Transporter_TransporterSOAP_Client() throws ExchangeException {
		URL wsdlURL = TransporterService.WSDL_LOCATION;
		ss = new TransporterService(wsdlURL, SERVICE_NAME);
		writer = ExchangeFactory.getInstance().newExchangeWriter();
	}

	public Map<QName, String> getListOfTransporters() {
		return listOfTransporters;
	}
	
	public ExchangeType pullWithId(UUID id, QName providerEndpointName, QName nodeEndpointName) throws TransportException_Exception  {
		petals.ow2.org.exchange.ExchangeType _pull__return = null;
		log.finest("Invoking pull...");
		
		// find good transporter from endpoint to call
		
		String endpointNodeAddress = this.listOfTransporters.get(nodeEndpointName);

		log.finest("endpointNodeAddress = " + endpointNodeAddress);

		try {
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			factory.setNamespaceAware(true);
			
			Document message = factory.newDocumentBuilder().newDocument();
			org.w3c.dom.Element pullWithId = message.createElementNS("http://petals.ow2.org/transporter/", "pullWithId");
			pullWithId.setPrefix("trans");
			
			org.w3c.dom.Element uuid = message.createElement("uuid");
			uuid.setTextContent(id.toString());
			pullWithId.appendChild(uuid);
			
			org.w3c.dom.Element endpointName = message.createElementNS("http://petals.ow2.org/transporter/", "endpointName");
			endpointName.setPrefix("trans");
			endpointName.setTextContent(providerEndpointName.toString());
			pullWithId.appendChild(endpointName);
			
			message.appendChild(pullWithId);
			message = createSOAPMessageRequest(message);
			
			Document response = this.sender.sendSoapRequest(message, endpointNodeAddress);
			
			testIfFault(response);
			Exchange exchange = extractExchangeFromSoapResponse(response);
			
			_pull__return = (ExchangeType) ((AbstractSchemaElementImpl)exchange).getModel();
		} catch (JDOMException e) {
			TransportException_Exception ex = new TransportException_Exception(e.getMessage(), new org.ow2.petals.transporter.TransportException(), e);
			ex.getFaultInfo().setErrorMsg(e.getMessage());
			throw ex;
		} catch (ParserConfigurationException e) {
			TransportException_Exception ex = new TransportException_Exception(e.getMessage(), new org.ow2.petals.transporter.TransportException(), e);
			ex.getFaultInfo().setErrorMsg(e.getMessage());
			throw ex;
		} catch (ExchangeException e) {
			TransportException_Exception ex = new TransportException_Exception(e.getMessage(), new org.ow2.petals.transporter.TransportException(), e);
			ex.getFaultInfo().setErrorMsg(e.getMessage());
			throw ex;
		} catch (SOAPException e) {
			TransportException_Exception ex = new TransportException_Exception(e.getMessage(), new org.ow2.petals.transporter.TransportException(), e);
			ex.getFaultInfo().setErrorMsg(e.getMessage());
			throw ex;
		} catch (TransportException e) {
			TransportException_Exception ex = new TransportException_Exception(e.getMessage(), new org.ow2.petals.transporter.TransportException(), e);
			ex.getFaultInfo().setErrorMsg(e.getMessage());
			throw ex;
		}
		return _pull__return;
	}

	public ExchangeType pullWithId(PullWithId parameters) throws TransportException_Exception   {
		throw new UnsupportedOperationException();
	}


	public ExchangeType pull(String endpointTransporter) throws TransportException_Exception {
		throw new UnsupportedOperationException();
	}


	public ExchangeType pull(QName providerEndpointName, QName nodeEndpointName) throws TransportException_Exception   {
		petals.ow2.org.exchange.ExchangeType _pull__return = null;
		log.finest("Invoking pull...");
		
		// find good transporter from endpoint to call
		
		String endpointNodeAddress = this.listOfTransporters.get(nodeEndpointName);

		log.finest("endpointNodeAddress = " + endpointNodeAddress);

		try {
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			factory.setNamespaceAware(true);
			
			Document message = factory.newDocumentBuilder().newDocument();

			org.w3c.dom.Element endpointName = message.createElementNS("http://petals.ow2.org/transporter/", "endpointName");
			endpointName.setPrefix("trans");
			endpointName.setTextContent(providerEndpointName.toString());
			

			message.appendChild(endpointName);
			
			message = createSOAPMessageRequest(message);
			
			Document response = this.sender.sendSoapRequest(message, endpointNodeAddress);
			
			testIfFault(response);
			Exchange exchange = extractExchangeFromSoapResponse(response);
			
			
			_pull__return = (ExchangeType) ((AbstractSchemaElementImpl)exchange).getModel();
		} catch (JDOMException e) {
			TransportException_Exception ex = new TransportException_Exception(e.getMessage(), new org.ow2.petals.transporter.TransportException(), e);
			ex.getFaultInfo().setErrorMsg(e.getMessage());
			throw ex;
		} catch (ParserConfigurationException e) {
			TransportException_Exception ex = new TransportException_Exception(e.getMessage(), new org.ow2.petals.transporter.TransportException(), e);
			ex.getFaultInfo().setErrorMsg(e.getMessage());
			throw ex;
		} catch (ExchangeException e) {
			TransportException_Exception ex = new TransportException_Exception(e.getMessage(), new org.ow2.petals.transporter.TransportException(), e);
			ex.getFaultInfo().setErrorMsg(e.getMessage());
			throw ex;
		} catch (SOAPException e) {
			TransportException_Exception ex = new TransportException_Exception(e.getMessage(), new org.ow2.petals.transporter.TransportException(), e);
			ex.getFaultInfo().setErrorMsg(e.getMessage());
			throw ex;
		} catch (TransportException e) {
			TransportException_Exception ex = new TransportException_Exception(e.getMessage(), new org.ow2.petals.transporter.TransportException(), e);
			ex.getFaultInfo().setErrorMsg(e.getMessage());
			throw ex;
		}
		return _pull__return;
	}
	
	private void testIfFault(Document response) throws TransportException {
		NodeList bodies = response.getDocumentElement().getElementsByTagNameNS("http://schemas.xmlsoap.org/soap/envelope/", "Body");
		if((bodies != null)&&(bodies.getLength() == 1)) {
			NodeList faults = ((org.w3c.dom.Element)bodies.item(0)).getElementsByTagNameNS("http://schemas.xmlsoap.org/soap/envelope/", "Fault");
			if((faults != null)&&(faults.getLength() == 1)) {
				NodeList faultstrings = ((org.w3c.dom.Element)faults.item(0)).getElementsByTagName("faultstring");
				// TODO: get details of the fault
				if((faultstrings != null)&&(faultstrings.getLength() == 1)) {
					throw new TransportException(faultstrings.item(0).getTextContent());
				}
				throw new TransportException("Impossible to analyze the fault but there is a fault!!!!");
			}
		}
	}

	private Exchange extractExchangeFromSoapResponse(Document response) throws ExchangeException {
		Exchange exchange = null;
		try {
			

			NodeList bodies = response.getDocumentElement().getElementsByTagNameNS("http://schemas.xmlsoap.org/soap/envelope/", "Body");
			if((bodies != null)&&(bodies.getLength() == 1)) {
				DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
				factory.setNamespaceAware(true);
				Document doc = factory.newDocumentBuilder().newDocument();
				doc.appendChild(doc.adoptNode(bodies.item(0).cloneNode(true)));
				exchange = ExchangeFactory.getInstance().newExchangeReader().readExchange(doc);
			}
			
		} catch (ParserConfigurationException e) {
			throw new ExchangeException(e);
		}

		return exchange;
	}


	public void push(PushRequest parameters) {
		throw new UnsupportedOperationException();
	}
	
	
	public void push(QName endpointNodeName, ExchangeType exchange) throws TransportException_Exception {
		log.finest("Invoking push...");

		String endpointNodeAddress = this.listOfTransporters.get(endpointNodeName);

		log.finest("endpointAddress = " + endpointNodeAddress);

		Exchange ex = new ExchangeImpl(URI.create("."), exchange, new NamespaceMapperImpl(), new SchemaLocatorImpl());

		try {
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			factory.setNamespaceAware(true);
			
			Document message = factory.newDocumentBuilder().newDocument();
			org.w3c.dom.Element pushRequest = message.createElementNS("http://petals.ow2.org/transporter/", "pushRequest");
			pushRequest.setPrefix("trans");
			org.w3c.dom.Element endpointName = message.createElementNS("http://petals.ow2.org/transporter/", "endpointName");
			endpointName.setPrefix("trans");
			endpointName.setTextContent(endpointNodeName.toString());
			pushRequest.appendChild(endpointName);
			
			ex.setName(new QName("http://petals.ow2.org/transporter/", "exchange"));
			Document request = this.writer.getDocument(ex);
			org.w3c.dom.Element exchangeElmt = (org.w3c.dom.Element) message.adoptNode(request.getDocumentElement().cloneNode(true));
			exchangeElmt.setPrefix("trans");
			pushRequest.appendChild(exchangeElmt);
			message.appendChild(pushRequest);
			
			message = createSOAPMessageRequest(message);
			
			this.sender.sendSoapRequest(message, endpointNodeAddress);
		} catch (ExchangeException e) {
			TransportException_Exception exception = new TransportException_Exception(e.getMessage(), new org.ow2.petals.transporter.TransportException(), e);
			exception.getFaultInfo().setErrorMsg(e.getMessage());
			throw exception;
		} catch (JDOMException e) {
			TransportException_Exception exception = new TransportException_Exception(e.getMessage(), new org.ow2.petals.transporter.TransportException(), e);
			exception.getFaultInfo().setErrorMsg(e.getMessage());
			throw exception;
		} catch (ParserConfigurationException e) {
			TransportException_Exception exception = new TransportException_Exception(e.getMessage(), new org.ow2.petals.transporter.TransportException(), e);
			exception.getFaultInfo().setErrorMsg(e.getMessage());
			throw exception;
		} catch (SOAPException e) {
			TransportException_Exception exception = new TransportException_Exception(e.getMessage(), new org.ow2.petals.transporter.TransportException(), e);
			exception.getFaultInfo().setErrorMsg(e.getMessage());
			throw exception;
		}
	}
	
	
	private static Document createSOAPMessageRequest(Document msg) throws JDOMException {
		Document res = null;

		Element env = new Element("Envelope", Namespace.getNamespace("soap-env", "http://schemas.xmlsoap.org/soap/envelope/"));
		env.addNamespaceDeclaration(Namespace.getNamespace("xsd", "http://www.w3.org/1999/XMLSchema"));
		env.addNamespaceDeclaration(Namespace.getNamespace("xsi", "http://www.w3.org/1999/XMLSchema-instance"));
		
		
		Element body = new Element("Body", Namespace.getNamespace("soap-env", "http://schemas.xmlsoap.org/soap/envelope/"));
		env.addContent(body);
		
		org.jdom.Document jdom = new org.jdom.Document(env);

		DOMBuilder builder = new DOMBuilder();
		org.jdom.Document jdomDocument = builder.build(msg);

		body.addContent(((Element)jdomDocument.getRootElement()).detach());

		DOMOutputter converter = new DOMOutputter();
		res = converter.output(jdom);

		return res;
	}
	
}
